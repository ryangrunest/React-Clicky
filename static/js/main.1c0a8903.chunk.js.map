{"version":3,"sources":["components/Header/Header.js","components/Image/Image.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Image","state","isClicked","checkIfClicked","console","log","_this","setState","alert","src","this","props","id","alt","onClick","React","Component","Main","data","map","item","components_Image_Image","clickEvent","cardClicked","App","cards","pickedCards","totalGuessed","highestCount","checkCard","Object","objectSpread","defineProperty","components_Header_Header","components_Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAYeA,MATf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,kBCWSC,oNAdbC,MAAS,CACPC,WAAW,KAEbC,eAAiB,WACfC,QAAQC,IAAI,YACkB,IAAzBC,EAAKL,MAAMC,UACdI,EAAKC,SAAS,CAAGL,WAAW,IACrBM,MAAM,wFAGb,OAAOZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQU,IAAKC,KAAKC,MAAMC,GAAIC,IAAI,kBAAkBC,QAASJ,KAAKP,wBAXxEY,IAAMC,YCaXC,0LAXJ,IAAAX,EAAAI,KACP,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZW,KAAKC,MAAMO,KAAKC,IAAI,SAAAC,GAAI,OACvBxB,EAAAC,EAAAC,cAACuB,EAAD,CAAOT,GAAIQ,EAAKR,GAAIU,WAAYhB,EAAKK,MAAMY,wBALlCR,IAAMC,YC0CVQ,6MAxCbvB,MAAQ,CACNwB,MAAO,CACL,CAAEb,GAAI,eACN,CAAEA,GAAI,eACN,CAAEA,GAAI,eACN,CAAEA,GAAI,eACN,CAAEA,GAAI,eACN,CAAEA,GAAI,eACN,CAAEA,GAAI,eACN,CAAEA,GAAI,eACN,CAAEA,GAAI,eACN,CAAEA,GAAI,iBACN,CAAEA,GAAI,gBACN,CAAEA,GAAI,iBAERc,YAAa,GACbC,aAAc,EACdC,aAAc,KAEhBC,UAAY,SAACjB,GACXN,EAAKC,SAAS,CACZmB,YAAYI,OAAAC,EAAA,EAAAD,CAAA,GACPxB,EAAKL,MAAMyB,YADLI,OAAAE,EAAA,EAAAF,CAAA,GAERlB,GAAON,EAAKL,MAAMyB,YAAYd,IAAO,GAAK,IAE7Ce,aAAcrB,EAAKL,MAAM0B,aAAe,6EAO1C,OAFAvB,QAAQC,IAAIK,KAAKT,MAAMyB,aACvBtB,QAAQC,IAAIK,KAAKT,MAAM0B,cAEvB/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,CAAMhB,KAAMR,KAAKT,MAAMwB,MAAOF,YAAab,KAAKmB,oBApCpCb,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1c0a8903.chunk.js","sourcesContent":["import React from \"react\";\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"left\">Clicky GoT</h1>\n      <h1 className=\"right\">A React Game</h1>\n    </div>\n  )\n}\n\nexport default Header;","import React from \"react\";\nimport './Image.css';\n\nclass Image extends React.Component {\n  state =  {\n    isClicked: false\n  }\n  checkIfClicked = () => {\n    console.log('clicked')\n    if ( this.state.isClicked === false ) {\n      this.setState({  isClicked: true })\n    } else { alert('you lost :(') }\n  }\n  render() {\n      return <img className=\"image\" src={this.props.id} alt=\"game of thrones\" onClick={this.checkIfClicked}/>\n  }\n}\n\nexport default Image;","import React from \"react\";\nimport Image from \"../Image/Image\"\nimport './Main.css';\n\nclass Main extends React.Component {\n  render() {\n    return (\n      <div className='main-content'>\n        {this.props.data.map(item =>\n          <Image id={item.id} clickEvent={this.props.cardClicked}/>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Main;","import React, { Component } from \"react\";\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Main from './components/Main/Main';\n\nclass App extends Component {\n  state = {\n    cards: [\n      { id: '/imgs/1.jpg' },\n      { id: '/imgs/2.jpg' },\n      { id: '/imgs/3.jpg' },\n      { id: '/imgs/4.png' },\n      { id: '/imgs/5.jpg' },\n      { id: '/imgs/6.jpg' },\n      { id: '/imgs/7.png' },\n      { id: '/imgs/8.jpg' },\n      { id: '/imgs/9.jpg' },\n      { id: '/imgs/10.jpeg' },\n      { id: '/imgs/11.jpg' },\n      { id: '/imgs/12.jpg' },\n    ],\n    pickedCards: {},\n    totalGuessed: 0,\n    highestCount: 0\n  }\n  checkCard = (id) => {\n    this.setState({\n      pickedCards: {\n        ...this.state.pickedCards,\n        [id]:  (this.state.pickedCards[id] || 0) + 1,\n      },\n      totalGuessed: this.state.totalGuessed + 1\n    });\n    // this.setState({ totalGuessed: this.totalGuessed + 1 })\n  };\n  render() {\n    console.log(this.state.pickedCards);\n    console.log(this.state.totalGuessed);\n    return (\n    <div>\n      <Header />\n      <Main data={this.state.cards} cardClicked={this.checkCard}/>\n    </div>\n  )};\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}